.TH "gumbo.h" 3 "Tue Aug 13 2013" "Version 0.9.0" "Gumbo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
gumbo.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <stdbool\&.h>\fP
.br
\fC#include <stddef\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBGumboSourcePosition\fP"
.br
.ti -1c
.RI "struct \fBGumboStringPiece\fP"
.br
.ti -1c
.RI "struct \fBGumboVector\fP"
.br
.ti -1c
.RI "struct \fBGumboAttribute\fP"
.br
.ti -1c
.RI "struct \fBGumboDocument\fP"
.br
.ti -1c
.RI "struct \fBGumboText\fP"
.br
.ti -1c
.RI "struct \fBGumboElement\fP"
.br
.ti -1c
.RI "struct \fBGumboNode\fP"
.br
.ti -1c
.RI "struct \fBGumboOptions\fP"
.br
.ti -1c
.RI "struct \fBGumboOutput\fP"
.br
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef void *(* \fBGumboAllocatorFunction\fP )(void *userdata, size_t size)"
.br
.ti -1c
.RI "typedef void(* \fBGumboDeallocatorFunction\fP )(void *userdata, void *ptr)"
.br
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBGumboTag\fP { \fBGUMBO_TAG_HTML\fP, \fBGUMBO_TAG_HEAD\fP, \fBGUMBO_TAG_TITLE\fP, \fBGUMBO_TAG_BASE\fP, \fBGUMBO_TAG_LINK\fP, \fBGUMBO_TAG_META\fP, \fBGUMBO_TAG_STYLE\fP, \fBGUMBO_TAG_SCRIPT\fP, \fBGUMBO_TAG_NOSCRIPT\fP, \fBGUMBO_TAG_BODY\fP, \fBGUMBO_TAG_SECTION\fP, \fBGUMBO_TAG_NAV\fP, \fBGUMBO_TAG_ARTICLE\fP, \fBGUMBO_TAG_ASIDE\fP, \fBGUMBO_TAG_H1\fP, \fBGUMBO_TAG_H2\fP, \fBGUMBO_TAG_H3\fP, \fBGUMBO_TAG_H4\fP, \fBGUMBO_TAG_H5\fP, \fBGUMBO_TAG_H6\fP, \fBGUMBO_TAG_HGROUP\fP, \fBGUMBO_TAG_HEADER\fP, \fBGUMBO_TAG_FOOTER\fP, \fBGUMBO_TAG_ADDRESS\fP, \fBGUMBO_TAG_P\fP, \fBGUMBO_TAG_HR\fP, \fBGUMBO_TAG_PRE\fP, \fBGUMBO_TAG_BLOCKQUOTE\fP, \fBGUMBO_TAG_OL\fP, \fBGUMBO_TAG_UL\fP, \fBGUMBO_TAG_LI\fP, \fBGUMBO_TAG_DL\fP, \fBGUMBO_TAG_DT\fP, \fBGUMBO_TAG_DD\fP, \fBGUMBO_TAG_FIGURE\fP, \fBGUMBO_TAG_FIGCAPTION\fP, \fBGUMBO_TAG_DIV\fP, \fBGUMBO_TAG_A\fP, \fBGUMBO_TAG_EM\fP, \fBGUMBO_TAG_STRONG\fP, \fBGUMBO_TAG_SMALL\fP, \fBGUMBO_TAG_S\fP, \fBGUMBO_TAG_CITE\fP, \fBGUMBO_TAG_Q\fP, \fBGUMBO_TAG_DFN\fP, \fBGUMBO_TAG_ABBR\fP, \fBGUMBO_TAG_TIME\fP, \fBGUMBO_TAG_CODE\fP, \fBGUMBO_TAG_VAR\fP, \fBGUMBO_TAG_SAMP\fP, \fBGUMBO_TAG_KBD\fP, \fBGUMBO_TAG_SUB\fP, \fBGUMBO_TAG_SUP\fP, \fBGUMBO_TAG_I\fP, \fBGUMBO_TAG_B\fP, \fBGUMBO_TAG_MARK\fP, \fBGUMBO_TAG_RUBY\fP, \fBGUMBO_TAG_RT\fP, \fBGUMBO_TAG_RP\fP, \fBGUMBO_TAG_BDI\fP, \fBGUMBO_TAG_BDO\fP, \fBGUMBO_TAG_SPAN\fP, \fBGUMBO_TAG_BR\fP, \fBGUMBO_TAG_WBR\fP, \fBGUMBO_TAG_INS\fP, \fBGUMBO_TAG_DEL\fP, \fBGUMBO_TAG_IMAGE\fP, \fBGUMBO_TAG_IMG\fP, \fBGUMBO_TAG_IFRAME\fP, \fBGUMBO_TAG_EMBED\fP, \fBGUMBO_TAG_OBJECT\fP, \fBGUMBO_TAG_PARAM\fP, \fBGUMBO_TAG_VIDEO\fP, \fBGUMBO_TAG_AUDIO\fP, \fBGUMBO_TAG_SOURCE\fP, \fBGUMBO_TAG_TRACK\fP, \fBGUMBO_TAG_CANVAS\fP, \fBGUMBO_TAG_MAP\fP, \fBGUMBO_TAG_AREA\fP, \fBGUMBO_TAG_MATH\fP, \fBGUMBO_TAG_MI\fP, \fBGUMBO_TAG_MO\fP, \fBGUMBO_TAG_MN\fP, \fBGUMBO_TAG_MS\fP, \fBGUMBO_TAG_MTEXT\fP, \fBGUMBO_TAG_MGLYPH\fP, \fBGUMBO_TAG_MALIGNMARK\fP, \fBGUMBO_TAG_ANNOTATION_XML\fP, \fBGUMBO_TAG_SVG\fP, \fBGUMBO_TAG_FOREIGNOBJECT\fP, \fBGUMBO_TAG_DESC\fP, \fBGUMBO_TAG_TABLE\fP, \fBGUMBO_TAG_CAPTION\fP, \fBGUMBO_TAG_COLGROUP\fP, \fBGUMBO_TAG_COL\fP, \fBGUMBO_TAG_TBODY\fP, \fBGUMBO_TAG_THEAD\fP, \fBGUMBO_TAG_TFOOT\fP, \fBGUMBO_TAG_TR\fP, \fBGUMBO_TAG_TD\fP, \fBGUMBO_TAG_TH\fP, \fBGUMBO_TAG_FORM\fP, \fBGUMBO_TAG_FIELDSET\fP, \fBGUMBO_TAG_LEGEND\fP, \fBGUMBO_TAG_LABEL\fP, \fBGUMBO_TAG_INPUT\fP, \fBGUMBO_TAG_BUTTON\fP, \fBGUMBO_TAG_SELECT\fP, \fBGUMBO_TAG_DATALIST\fP, \fBGUMBO_TAG_OPTGROUP\fP, \fBGUMBO_TAG_OPTION\fP, \fBGUMBO_TAG_TEXTAREA\fP, \fBGUMBO_TAG_KEYGEN\fP, \fBGUMBO_TAG_OUTPUT\fP, \fBGUMBO_TAG_PROGRESS\fP, \fBGUMBO_TAG_METER\fP, \fBGUMBO_TAG_DETAILS\fP, \fBGUMBO_TAG_SUMMARY\fP, \fBGUMBO_TAG_COMMAND\fP, \fBGUMBO_TAG_MENU\fP, \fBGUMBO_TAG_APPLET\fP, \fBGUMBO_TAG_ACRONYM\fP, \fBGUMBO_TAG_BGSOUND\fP, \fBGUMBO_TAG_DIR\fP, \fBGUMBO_TAG_FRAME\fP, \fBGUMBO_TAG_FRAMESET\fP, \fBGUMBO_TAG_NOFRAMES\fP, \fBGUMBO_TAG_ISINDEX\fP, \fBGUMBO_TAG_LISTING\fP, \fBGUMBO_TAG_XMP\fP, \fBGUMBO_TAG_NEXTID\fP, \fBGUMBO_TAG_NOEMBED\fP, \fBGUMBO_TAG_PLAINTEXT\fP, \fBGUMBO_TAG_RB\fP, \fBGUMBO_TAG_STRIKE\fP, \fBGUMBO_TAG_BASEFONT\fP, \fBGUMBO_TAG_BIG\fP, \fBGUMBO_TAG_BLINK\fP, \fBGUMBO_TAG_CENTER\fP, \fBGUMBO_TAG_FONT\fP, \fBGUMBO_TAG_MARQUEE\fP, \fBGUMBO_TAG_MULTICOL\fP, \fBGUMBO_TAG_NOBR\fP, \fBGUMBO_TAG_SPACER\fP, \fBGUMBO_TAG_TT\fP, \fBGUMBO_TAG_U\fP, \fBGUMBO_TAG_UNKNOWN\fP, \fBGUMBO_TAG_LAST\fP }"
.br
.ti -1c
.RI "enum \fBGumboAttributeNamespaceEnum\fP { \fBGUMBO_ATTR_NAMESPACE_NONE\fP, \fBGUMBO_ATTR_NAMESPACE_XLINK\fP, \fBGUMBO_ATTR_NAMESPACE_XML\fP, \fBGUMBO_ATTR_NAMESPACE_XMLNS\fP }"
.br
.ti -1c
.RI "enum \fBGumboNodeType\fP { \fBGUMBO_NODE_DOCUMENT\fP, \fBGUMBO_NODE_ELEMENT\fP, \fBGUMBO_NODE_TEXT\fP, \fBGUMBO_NODE_CDATA\fP, \fBGUMBO_NODE_COMMENT\fP, \fBGUMBO_NODE_WHITESPACE\fP }"
.br
.ti -1c
.RI "enum \fBGumboQuirksModeEnum\fP { \fBGUMBO_DOCTYPE_NO_QUIRKS\fP, \fBGUMBO_DOCTYPE_QUIRKS\fP, \fBGUMBO_DOCTYPE_LIMITED_QUIRKS\fP }"
.br
.ti -1c
.RI "enum \fBGumboNamespaceEnum\fP { \fBGUMBO_NAMESPACE_HTML\fP, \fBGUMBO_NAMESPACE_SVG\fP, \fBGUMBO_NAMESPACE_MATHML\fP }"
.br
.ti -1c
.RI "enum \fBGumboParseFlags\fP { \fBGUMBO_INSERTION_NORMAL\fP =  0, \fBGUMBO_INSERTION_BY_PARSER\fP =  1 << 0, \fBGUMBO_INSERTION_IMPLICIT_END_TAG\fP =  1 << 1, \fBGUMBO_INSERTION_IMPLIED\fP =  1 << 3, \fBGUMBO_INSERTION_CONVERTED_FROM_END_TAG\fP =  1 << 4, \fBGUMBO_INSERTION_FROM_ISINDEX\fP =  1 << 5, \fBGUMBO_INSERTION_FROM_IMAGE\fP =  1 << 6, \fBGUMBO_INSERTION_RECONSTRUCTED_FORMATTING_ELEMENT\fP =  1 << 7, \fBGUMBO_INSERTION_ADOPTION_AGENCY_CLONED\fP =  1 << 8, \fBGUMBO_INSERTION_ADOPTION_AGENCY_MOVED\fP =  1 << 9, \fBGUMBO_INSERTION_FOSTER_PARENTED\fP =  1 << 10 }"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "bool \fBgumbo_string_equals\fP (const \fBGumboStringPiece\fP *str1, const \fBGumboStringPiece\fP *str2)"
.br
.ti -1c
.RI "bool \fBgumbo_string_equals_ignore_case\fP (const \fBGumboStringPiece\fP *str1, const \fBGumboStringPiece\fP *str2)"
.br
.ti -1c
.RI "int \fBgumbo_vector_index_of\fP (\fBGumboVector\fP *vector, void *element)"
.br
.ti -1c
.RI "const char * \fBgumbo_normalized_tagname\fP (\fBGumboTag\fP tag)"
.br
.ti -1c
.RI "void \fBgumbo_tag_from_original_text\fP (\fBGumboStringPiece\fP *text)"
.br
.ti -1c
.RI "const char * \fBgumbo_normalize_svg_tagname\fP (const \fBGumboStringPiece\fP *tagname)"
.br
.ti -1c
.RI "const \fBGumboTag\fP \fBgumbo_tag_enum\fP (const char *tagname)"
.br
.ti -1c
.RI "\fBGumboAttribute\fP * \fBgumbo_get_attribute\fP (const struct _GumboVector *attrs, const char *name)"
.br
.ti -1c
.RI "struct _GumboOutput * \fBgumbo_parse\fP (const char *buffer)"
.br
.ti -1c
.RI "struct _GumboOutput * \fBgumbo_parse_with_options\fP (const \fBGumboOptions\fP *options, const char *buffer, size_t buffer_length)"
.br
.ti -1c
.RI "void \fBgumbo_destroy_output\fP (const struct _GumboOptions *options, \fBGumboOutput\fP *output)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const \fBGumboSourcePosition\fP \fBkGumboEmptySourcePosition\fP"
.br
.ti -1c
.RI "const \fBGumboStringPiece\fP \fBkGumboEmptyString\fP"
.br
.ti -1c
.RI "const \fBGumboVector\fP \fBkGumboEmptyVector\fP"
.br
.ti -1c
.RI "const \fBGumboOptions\fP \fBkGumboDefaultOptions\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 

.SH "Typedef Documentation"
.PP 
.SS "typedef void*(* \fBGumboAllocatorFunction\fP)(void *userdata, size_t size)"The type for an allocator function\&. Takes the 'userdata' member of the GumboParser struct as its first argument\&. Semantics should be the same as malloc, i\&.e\&. return a block of size_t bytes on success or NULL on failure\&. Allocating a block of 0 bytes behaves as per malloc\&. 
.SS "typedef void(* \fBGumboDeallocatorFunction\fP)(void *userdata, void *ptr)"The type for a deallocator function\&. Takes the 'userdata' member of the GumboParser struct as its first argument\&. 
.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBGumboTag\fP"An enum for all the tags defined in the HTML5 standard\&. These correspond to the tag names themselves\&. Enum constants exist only for tags which appear in the spec itself (or for tags with special handling in the SVG and MathML namespaces); any other tags appear as GUMBO_TAG_UNKNOWN and the actual tag name can be obtained through original_tag\&.
.PP
This is mostly for API convenience, so that clients of this library don't need to perform a strcasecmp to find the normalized tag name\&. It also has efficiency benefits, by letting the parser work with enums instead of strings\&. 
.SS "enum \fBGumboAttributeNamespaceEnum\fP"Attribute namespaces\&. HTML includes special handling for XLink, XML, and XMLNS namespaces on attributes\&. Everything else goes in the generatic 'NONE' namespace\&. 
.SS "enum \fBGumboNodeType\fP"Enum denoting the type of node\&. This determines the type of the node\&.v union\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIGUMBO_NODE_DOCUMENT \fP\fP
Document node\&. v will be a \fBGumboDocument\fP\&. 
.TP
\fB\fIGUMBO_NODE_ELEMENT \fP\fP
Element node\&. v will be a \fBGumboElement\fP\&. 
.TP
\fB\fIGUMBO_NODE_TEXT \fP\fP
Text node\&. v will be a \fBGumboText\fP\&. 
.TP
\fB\fIGUMBO_NODE_CDATA \fP\fP
CDATA node\&. v will be a \fBGumboText\fP\&. 
.TP
\fB\fIGUMBO_NODE_COMMENT \fP\fP
Comment node\&. v\&. will be a \fBGumboText\fP, excluding comment delimiters\&. 
.TP
\fB\fIGUMBO_NODE_WHITESPACE \fP\fP
Text node, where all contents is whitespace\&. v will be a \fBGumboText\fP\&. 
.SS "enum \fBGumboQuirksModeEnum\fP"http://www.whatwg.org/specs/web-apps/current-work/complete/dom.html#quirks-mode 
.SS "enum \fBGumboNamespaceEnum\fP"Namespaces\&. Unlike in X(HT)ML, namespaces in HTML5 are not denoted by a prefix\&. Rather, anything inside an <svg> tag is in the SVG namespace, anything inside the <math> tag is in the MathML namespace, and anything else is inside the HTML namespace\&. No other namespaces are supported, so this can be an enum only\&. 
.SS "enum \fBGumboParseFlags\fP"Parse flags\&. We track the reasons for parser insertion of nodes and store them in a bitvector in the node itself\&. This lets client code optimize out nodes that are implied by the HTML structure of the document, or flag constructs that may not be allowed by a style guide, or track the prevalence of incorrect or tricky HTML code\&. 
.PP
\fBEnumerator: \fP
.in +1c
.TP
\fB\fIGUMBO_INSERTION_NORMAL \fP\fP
A normal node - both start and end tags appear in the source, nothing has been reparented\&. 
.TP
\fB\fIGUMBO_INSERTION_BY_PARSER \fP\fP
A node inserted by the parser to fulfill some implicit insertion rule\&. This is usually set in addition to some other flag giving a more specific insertion reason; it's a generic catch-all term meaning 'The start tag for
 this node did not appear in the document source'\&. 
.TP
\fB\fIGUMBO_INSERTION_IMPLICIT_END_TAG \fP\fP
A flag indicating that the end tag for this node did not appear in the document source\&. Note that in some cases, you can still have parser-inserted nodes with an explicit end tag: for example, 'Text</html>' has GUMBO_INSERTED_BY_PARSER set on the <html> node, but GUMBO_INSERTED_END_TAG_IMPLICITLY is unset, as the </html> tag actually exists\&. This flag will be set only if the end tag is completely missing; in some cases, the end tag may be misplaced (eg\&. a </body> tag with text afterwards), which will leave this flag unset and require clients to inspect the parse errors for that case\&. 
.TP
\fB\fIGUMBO_INSERTION_IMPLIED \fP\fP
A flag for nodes that are inserted because their presence is implied by other tags, eg\&. <html>, <head>, <body>, <tbody>, etc\&. 
.TP
\fB\fIGUMBO_INSERTION_CONVERTED_FROM_END_TAG \fP\fP
A flag for nodes that are converted from their end tag equivalents\&. For example,  when no paragraph is open implies that the parser should create a 
.PP
tag and immediately close it, while  means the same thing as 
.br
\&. 
.TP
\fB\fIGUMBO_INSERTION_FROM_ISINDEX \fP\fP
A flag for nodes that are converted from the parse of an <isindex> tag\&. 
.TP
\fB\fIGUMBO_INSERTION_FROM_IMAGE \fP\fP
A flag for <image> tags that are rewritten as \&. 
.TP
\fB\fIGUMBO_INSERTION_RECONSTRUCTED_FORMATTING_ELEMENT \fP\fP
A flag for nodes that are cloned as a result of the reconstruction of active formatting elements\&. This is set only on the clone; the initial portion of the formatting run is a NORMAL node with an IMPLICIT_END_TAG\&. 
.TP
\fB\fIGUMBO_INSERTION_ADOPTION_AGENCY_CLONED \fP\fP
A flag for nodes that are cloned by the adoption agency algorithm\&. 
.TP
\fB\fIGUMBO_INSERTION_ADOPTION_AGENCY_MOVED \fP\fP
A flag for nodes that are moved by the adoption agency algorithm\&. 
.TP
\fB\fIGUMBO_INSERTION_FOSTER_PARENTED \fP\fP
A flag for nodes that have been foster-parented out of a table (or should've been foster-parented, if verbatim mode is set)\&. 
.SH "Function Documentation"
.PP 
.SS "bool \fBgumbo_string_equals\fP (const \fBGumboStringPiece\fP *str1, const \fBGumboStringPiece\fP *str2)"Compares two GumboStringPieces, and returns true if they're equal or false otherwise\&. 
.SS "bool \fBgumbo_string_equals_ignore_case\fP (const \fBGumboStringPiece\fP *str1, const \fBGumboStringPiece\fP *str2)"Compares two GumboStringPieces ignoring case, and returns true if they're equal or false otherwise\&. 
.SS "int \fBgumbo_vector_index_of\fP (\fBGumboVector\fP *vector, void *element)"Returns the first index at which an element appears in this vector (testing by pointer equality), or -1 if it never does\&. 
.SS "const char* \fBgumbo_normalized_tagname\fP (\fBGumboTag\fPtag)"Returns the normalized (usually all-lowercased, except for foreign content) tag name for an GumboTag enum\&. Return value is static data owned by the library\&. 
.SS "void \fBgumbo_tag_from_original_text\fP (\fBGumboStringPiece\fP *text)"Extracts the tag name from the original_text field of an element or token by stripping off </> characters and attributes and adjusting the passed-in \fBGumboStringPiece\fP appropriately\&. The tag name is in the original case and shares a buffer with the original text, to simplify memory management\&. Behavior is undefined if a string-piece that doesn't represent an HTML tag (<tagname> or </tagname>) is passed in\&. If the string piece is completely empty (NULL data pointer), then this function will exit successfully as a no-op\&. 
.SS "const char* \fBgumbo_normalize_svg_tagname\fP (const \fBGumboStringPiece\fP *tagname)"Fixes the case of SVG elements that are not all lowercase\&. http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#parsing-main-inforeign This is not done at parse time because there's no place to store a mutated tag name\&. tag_name is an enum (which will be TAG_UNKNOWN for most SVG tags without special handling), while original_tag_name is a pointer into the original buffer\&. Instead, we provide this helper function that clients can use to rename SVG tags as appropriate\&. Returns the case-normalized SVG tagname if a replacement is found, or NULL if no normalization is called for\&. The return value is static data and owned by the library\&. 
.SS "const \fBGumboTag\fP \fBgumbo_tag_enum\fP (const char *tagname)"Converts a tag name string (which may be in upper or mixed case) to a tag enum\&. 
.SS "\fBGumboAttribute\fP* \fBgumbo_get_attribute\fP (const struct _GumboVector *attrs, const char *name)"Given a vector of GumboAttributes, look up the one with the specified name and return it, or NULL if no such attribute exists\&. This uses a case-insensitive match, as HTML is case-insensitive\&. 
.SS "struct _GumboOutput* \fBgumbo_parse\fP (const char *buffer)\fC [read]\fP"Parses a buffer of UTF8 text into an GumboNode parse tree\&. The buffer must live at least as long as the parse tree, as some fields (eg\&. original_text) point directly into the original buffer\&.
.PP
This doesn't support buffers longer than 4 gigabytes\&. 
.SS "struct _GumboOutput* \fBgumbo_parse_with_options\fP (const \fBGumboOptions\fP *options, const char *buffer, size_tbuffer_length)\fC [read]\fP"Extended version of gumbo_parse that takes an explicit options structure, buffer, and length\&. 
.SS "void \fBgumbo_destroy_output\fP (const struct _GumboOptions *options, \fBGumboOutput\fP *output)"Release the memory used for the parse tree & parse errors\&. 
.SH "Variable Documentation"
.PP 
.SS "const \fBGumboSourcePosition\fP \fBkGumboEmptySourcePosition\fP"A SourcePosition used for elements that have no source position, i\&.e\&. parser-inserted elements\&. 
.SS "const \fBGumboStringPiece\fP \fBkGumboEmptyString\fP"A constant to represent a 0-length null string\&. 
.SS "const \fBGumboVector\fP \fBkGumboEmptyVector\fP"An empty (0-length, 0-capacity) \fBGumboVector\fP\&. 
.SS "const \fBGumboOptions\fP \fBkGumboDefaultOptions\fP"Default options struct; use this with gumbo_parse_with_options\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for Gumbo from the source code\&.
