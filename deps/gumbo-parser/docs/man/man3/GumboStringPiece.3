.TH "GumboStringPiece" 3 "Tue Aug 13 2013" "Version 0.9.0" "Gumbo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GumboStringPiece \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gumbo\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "const char * \fBdata\fP"
.br
.ti -1c
.RI "size_t \fBlength\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A struct representing a string or part of a string\&. Strings within the parser are represented by a char* and a length; the char* points into an existing data buffer owned by some other code (often the original input)\&. GumboStringPieces are assumed (by convention) to be immutable, because they may share data\&. Use GumboStringBuffer if you need to construct a string\&. Clients should assume that it is not NUL-terminated, and should always use explicit lengths when manipulating them\&. 
.SH "Field Documentation"
.PP 
.SS "const char* \fBGumboStringPiece::data\fP"A pointer to the beginning of the string\&. NULL iff length == 0\&. 
.SS "size_t \fBGumboStringPiece::length\fP"The length of the string fragment, in bytes\&. May be zero\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Gumbo from the source code\&.
