.TH "GumboVector" 3 "Tue Aug 13 2013" "Version 0.9.0" "Gumbo" \" -*- nroff -*-
.ad l
.nh
.SH NAME
GumboVector \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <gumbo\&.h>\fP
.SS "Data Fields"

.in +1c
.ti -1c
.RI "void ** \fBdata\fP"
.br
.ti -1c
.RI "unsigned int \fBlength\fP"
.br
.ti -1c
.RI "unsigned int \fBcapacity\fP"
.br
.in -1c
.SH "Detailed Description"
.PP 
A simple vector implementation\&. This stores a pointer to a data array and a length\&. All elements are stored as void*; client code must cast to the appropriate type\&. Overflows upon addition result in reallocation of the data array, with the size doubling to maintain O(1) amortized cost\&. There is no removal function, as this isn't needed for any of the operations within this library\&. Iteration can be done through inspecting the structure directly in a for-loop\&. 
.SH "Field Documentation"
.PP 
.SS "void** \fBGumboVector::data\fP"Data elements\&. This points to a dynamically-allocated array of capacity elements, each a void* to the element itself\&. 
.SS "unsigned int \fBGumboVector::length\fP"Number of elements currently in the vector\&. 
.SS "unsigned int \fBGumboVector::capacity\fP"Current array capacity\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for Gumbo from the source code\&.
